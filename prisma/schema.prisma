// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(cuid())
  email        String         @unique
  firstName    String
  lastName     String
  phone        String
  address      String
  city         String
  country      String
  personType   PersonType
  university   String
  password     String
  suscriptions Subscription[]
  transactions Transaction[]
  userRoles    UserRole[]
  isActive     Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

enum PersonType {
  STUDENT
  TEACHER
  OTHER
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PENDING
  CANCELLED
}

model Subscription {
  id            String             @id @default(cuid())
  name          String
  user          User               @relation(fields: [userId], references: [id])
  userId        String
  startDate     DateTime           @default(now())
  endDate       DateTime
  status        SubscriptionStatus @default(ACTIVE)
  transaction   Transaction        @relation(fields: [transactionId], references: [id])
  transactionId String
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model Transaction {
  id              String         @id @default(cuid())
  user            User           @relation(fields: [userId], references: [id])
  userId          String
  amount          Float
  currency        String
  status          String
  provider        String
  providerOrderId String?
  metadata        Json?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  subscription    Subscription[]
}

model Role {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  userRoles       UserRole[]
  rolePermissions RolePermission[]
}

model Permission {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  rolePermissions RolePermission[]
}

model UserRole {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  role   Role   @relation(fields: [roleId], references: [id])
  roleId String
}

model RolePermission {
  id           String     @id @default(cuid())
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String
}
